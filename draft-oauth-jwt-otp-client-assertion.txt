



Network Working Group                                    O. Levi Hevroni
Internet-Draft                                         Soluto by Asurion
Intended status: Informational                            March 15, 2018
Expires: September 16, 2018


         Non-interactive OAuth 2.0 Client Authentication grant
              draft-oauth-JWS-otp-client-assertion-latest

Abstract

   This specification defines the use of a One Time Password, encoded as
   JSON Web Token (JWS) Bearer Token, as a means for requesting an OAuth
   2.0 access token as well as for client authentication.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 16, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Levi Hevroni           Expires September 16, 2018               [Page 1]

Internet-DraNon-interactive OAuth 2.0 Client Authentication   March 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Motivation  . . . . . . . . . . . . . . . . . . . . . . .   2
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Note to Readers . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  HTTP Parameter Bindings for Transporting Assertions . . . . .   3
     3.1.  Using OTP JWS for client authentication . . . . . . . . .   3
   4.  JWS format and request processing . . . . . . . . . . . . . .   4
     4.1.  One Time Password generation  . . . . . . . . . . . . . .   4
     4.2.  Creating the JWS  . . . . . . . . . . . . . . . . . . . .   4
     4.3.  Request processing  . . . . . . . . . . . . . . . . . . .   4
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   5
   7.  Normative References  . . . . . . . . . . . . . . . . . . . .   5
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

1.1.  Motivation

   Authentication is a crucial part of modern application.  There are
   various authentication methods for client side applications, and all
   those methods requires user interaction (e.g. login).  This is due to
   the fact that there is no secure way to embed credentials in the
   application code.

   While asking the user to login in order to authenticate the app is a
   strong authentication solution, it has impact on the application
   behavior.  A login is just another step the user has to complete in
   order to use the apps, which users don't always like to fulfill.

   Also, there are cases for applications without any UI, for example -
   Internet of Things applications.  For those applications, adding a
   login steps could be a challenge - see [RFC2142] which discuss
   another solution Browserless and Input Constrained Devices.

   In this document, we propose an extension to OAuth 2.0 protocol that
   provides a new authentication grant dedicated for those cases.  This
   grant will allow an application to use strong authentication solution
   without user interaction.

   This document defines how a One Time Password, encoded in a JWS, can
   be used to authenticate the client.  In order for the client to
   perfom an authentication request, an initial registration step is
   required.  This registration step is not part of this protocl, and
   should be defined by the authorization server.




Levi Hevroni           Expires September 16, 2018               [Page 2]

Internet-DraNon-interactive OAuth 2.0 Client Authentication   March 2018


1.2.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in [RFC2119].

2.  Note to Readers

      *Note to the RFC Editor:* Please remove this section prior to
      publication.

   Development of this draft takes place on Github at:
   https://github.com/Soluto/oauth-JWS-otp-client-assertion

3.  HTTP Parameter Bindings for Transporting Assertions

   The OAuth Assertion Framework [RFC7521] defines generic HTTP
   parameters for transporting assertions (a.k.a. security tokens)
   during interactions with a token endpoint.  This section defines
   specific parameters and treatments of those parameters for use with
   JWS Bearer Tokens.

3.1.  Using OTP JWS for client authentication

   To use a OTP JWS, the client first need to generate the OTP as
   defined in section "JWS format and request processing".  Than, the
   client need to use the following parameter values and encodings.

   The value of the "client_assertion_type" is
   "urn:ietf:params:oauth:client-assertion-type:JWS-otp".

   The value of the "client_assertion" parameter contains a single JWS,
   as defined in [RFC7515].  It MUST NOT contain more than one JWS.

   The following example demonstrates client authentication using a JWS
   during the presentation of an authorization code grant in an access
   token request (with extra line breaks for display purposes only):

        POST /token.oauth2 HTTP/1.1
        Host: as.example.com
        Content-Type: application/x-www-form-urlencoded

        grant_type=token id_token&&
        client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3A
        client-assertion-type%3AJWS-otp&
        client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.
        eyJpc3Mi[...omitted for brevity...].
        cC4hiUPo[...omitted for brevity...]



Levi Hevroni           Expires September 16, 2018               [Page 3]

Internet-DraNon-interactive OAuth 2.0 Client Authentication   March 2018


4.  JWS format and request processing

4.1.  One Time Password generation

   To generate one time password (OTP) as defined in [RFC2289], the
   client use it's state, created during the registration request, which
   is not covered in this document.  The state consist from 2 numbers:
   "previous" and "next".  Each of those numbers can hold signed int, up
   to 64 bytes length.  In order to generate a new JWS, the client has
   to roll this payload.  The rolling is done by setting the value of
   "previous" to the value of "current", and setting new crypto random,
   as defined in [RFC4086], value to "next".  For example, assuming this
   is the current state of the app:

   previous: 1
   next: 2

   After rolling, this will be the payload:

   previous: 2
   next: 5

4.2.  Creating the JWS

   After rolling the payload, the client can create the JWS.  This is
   the format of the JWS payload:

   {
       previous: 2
       next: 5
       client-id: 89
   }

   Where "client-id" is the id used when this client first registered.
   All the fields are required.  Any other fields besides those will be
   ignored.  To sign the JWS, the client use it's own key, which was
   genereated during the registration of this client.

4.3.  Request processing

   In order to issue an access token response as described in OAuth 2.0
   [RFC6749], the authorization server MUST validate the JWS according
   to the criteria below.  Application of additional restrictions and
   policy are at the discretion of the authorization server.  After
   decoding the JWS and extracting the "client-id", the server will
   fetch: - The key correspond to this client, received on the
   registration request - The current state of this client, from the
   last successful request, or from the registration



Levi Hevroni           Expires September 16, 2018               [Page 4]

Internet-DraNon-interactive OAuth 2.0 Client Authentication   March 2018


   The server verifies that the JWS is vallid, by using the client's
   key.  If the signature is valid, the server can validate the payload:
   - If the client's "previous" is equals to the server "new", the
   request is valid.  The server will issue a token, as specific in
   OAuth 2.0 [RFC6749] - If the client "previous" equals to the server
   "previous", and the client "next" equals to the server "next", the
   server construct an error response as defined in OAuth 2.0 [RFC6749]
   - Any other case will be threated by the server as an indication of a
   malicious attack, and should be reported accordenly.  The server
   construct an error response as defined in OAuth 2.0 [RFC6749]

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   TODO IANA

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2142]  Crocker, D., "Mailbox Names for Common Services, Roles and
              Functions", RFC 2142, DOI 10.17487/RFC2142, May 1997,
              <https://www.rfc-editor.org/info/rfc2142>.

   [RFC2289]  Haller, N., Metz, C., Nesser, P., and M. Straw, "A One-
              Time Password System", STD 61, RFC 2289,
              DOI 10.17487/RFC2289, February 1998,
              <https://www.rfc-editor.org/info/rfc2289>.

   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
              "Randomness Requirements for Security", BCP 106, RFC 4086,
              DOI 10.17487/RFC4086, June 2005,
              <https://www.rfc-editor.org/info/rfc4086>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.




Levi Hevroni           Expires September 16, 2018               [Page 5]

Internet-DraNon-interactive OAuth 2.0 Client Authentication   March 2018


   [RFC7521]  Campbell, B., Mortimore, C., Jones, M., and Y. Goland,
              "Assertion Framework for OAuth 2.0 Client Authentication
              and Authorization Grants", RFC 7521, DOI 10.17487/RFC7521,
              May 2015, <https://www.rfc-editor.org/info/rfc7521>.

Author's Address

   Omer Levi Hevroni
   Soluto by Asurion

   Email: omerlh@gmail.com








































Levi Hevroni           Expires September 16, 2018               [Page 6]
